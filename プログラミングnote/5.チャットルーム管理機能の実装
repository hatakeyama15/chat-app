1.HTMLファイルとCSSファイルの準備をしよう
  ・カリキュラムのファイルをダウンロードしてroom-materialsディレクトリの中のファイルを指定されて場所に置く
    room.cssはapp/assets/stylesheets/ここに置く
    roomディレクトリはapp/views/に置く
  
2.Roomモデルを作成
  ・roomsテーブルを作成
  ターミナル：        rails g model room
  ・ファイルを生成したら（db/migrate/20XXXXXXXXXXXX_create_rooms.rb）に下記コードを記載
      t.string :name, null: false
  ・DBに反映する
  ターミナル：        rails db:migrate

3.コントローラーの実装
・コントローラーの作成
  ・ターミナル：        rails g controller rooms
  ・ファイルを編集 （app/controllers/rooms_controller.rb）
    def new
      @room = Room.new
    end

4.ルーティングの設定(config/routes.rb)
  ・resources :rooms, only: [:new, :create]を追加

5.中間テーブルの作成
  ・モデルを作成
    ターミナル：        rails g model room_user
  書籍）references（リファレンシーズ）型（t.references :カラム名）
       外部キーのカラムを追加する際に、用いる型のことです。
       t.references :userと記載すれば、user_idというカラムが生成
       foreign_key: trueという記述を加えることで、外部キー制約を設定
  ・中間テーブルに外部キーの設定をする（db/migrate/20XXXXXXXXXXXX_create_room_users.rb）
      t.references :room, null: false, foreign_key: true
      t.references :user, null: false, foreign_key: true
  ・DBに反映する
      ターミナル：        rails db:migrate
  ・ローカルサーバーを再起動する
    control + c でサーバー停止
    ターミナル：        rails s

6.多対多のアソシエーションを記述
  ・roomsモデルの編集（app/models/room.rb）
    has_many :room_users
    has_many :users, through: :room_users
  ・usersモデル編集（app/models/user.rb）
    has_many :room_users
    has_many :rooms, through: :room_users
  ・room_userモデル（中間テーブル）を編集（app/models/room_user.rb）
    belongs_to :room
    belongs_to :user

7.コンソールでデータを追加
  ・コンソールを起動
    ターミナル：          rails c

8.データを保存
  ・以下のコマンドをコンソール上で実行します。
    user_idsというキー、そしてその値に配列を指定する特殊な記述です。
    コンソール上：        Room.create(name: "ルーム１", user_ids: [1, 2])
    書籍）プルダウンは、select要素とoption要素を使用して実装します。
        select（セレクト）要素
          プルダウンのようなセレクトボックスを作成するための要素です。
          select要素のname属性に任意の値を指定することで、paramsを通して、
          その値をコントローラーへ渡すことができます
        option（オプション）要素
          select要素の中に記述することで、プルダウンの選択肢になる要素です。

9.プルダウンを実装
  ・新規チャットルーム作成画面のビューを以下のように編集してください。（app/views/rooms/new.html.erb）
        <div class='chat-room-form__field--right'>
          <select>
            <option>チャットするユーザーを選択してください</option>
            <option>ユーザー1</option>
            <option>ユーザー2</option>
            </select>
      </div>

10.DB上のデータを取得
  ビューファイル上で、DBに管理されているユーザーすべてのレコードをUserクラスから取得して、
  それぞれ1つずつユーザー名を表示させる実装を行います。（app/views/rooms/new.html.erb）
  <select></select>の中を編集
    <option value="">チャットするユーザーを選択してください</option>
            <% User.all.each do |user| %>
              <option><%= user.name %></option>
            <% end %>

11.選択肢から現在ログインしているユーザー名を取り除きましょう
  ・以下を編集（app/views/rooms/new.html.erb）
        <select>
          <option value="">チャットするユーザーを選択してください</option>
            <% User.where.not(id: current_user.id).each do |user| %>
              <option><%= user.name %></option>
            <% end %>
        </select>

12.コントローラーへ送る値を指定する
  ・以下のように編集（app/views/rooms/new.html.erb）
  <select name="room[user_ids][]">  #編集
    <option value="">チャットするユーザーを選択してください</option>
      <% User.where.not(id: current_user.id).each do |user| %>
    <option value=<%= user.id %>><%= user.name %></option>  #編集

13.パラメーターにログイン中ユーザーのidも含めましょう
  ・以下のようにnew.html.erbを記述してください。（app/views/rooms/new.html.erb）
  <select name="room[user_ids][]">
    <option value="">チャットするユーザーを選択してください</option>
    <% User.where.not(id: current_user.id).each do |user| %>
      <option value=<%=user.id%>><%= user.name %></option>
    <% end %>
  </select>
  <input name="room[user_ids][]" type="hidden" value=<%= current_user.id %>>

14.チャットルーム保存機能を実装しよう
  ・pry-railsをインストールしましょう（Gemfile）
    gem 'pry-rails'
  ・ターミナルでbundle installを実行
  ターミナル：          bundle install
  ・ローカルサーバーを再起動する
  ターミナル：        control + c
  ターミナル：        rails s
  .送信されるデータの確認（app/controllers/rooms_controller.rb）
  def create
    binding.pry
  end

16.DBに値を保存できるようにコントローラーを編集しましょう
  ・app/controllers/rooms_controller.rb
  def create
      @room = Room.new(room_params)
      if @room.save
        redirect_to root_path
      else
        render :new, status: :unprocessable_entity
      end
    end

    private

    def room_params
      params.require(:room).permit(:name, user_ids: [])
    end
    書籍）user_ids: []という記述があります。
    このように、配列に対して保存を許可したい場合は、キーに対し[]を値として記述します。

17.バリデーションを設定しよう
  ・roomモデルを以下のように編集しましょう。
    validates :name, presence: true ＃追加

18.チャット画面の編集
  ・サイドバーにチャットルーム名が表示されるようにしましょう（app/views/messages/_side_bar.html.erb）
    <div class="rooms">内に下記コードを追加する
      % current_user.rooms.each do |room| %>
      <div class="room">
        <div class="room-name">
          <a href="#"><%= room.name %></a>
        </div>
      </div>
    <% end %>
  ・サイドバーのボタンからチャットルーム新規作成画面へ遷移するように編集しましょう
  ターミナル：        rails routes  # リンクの確認
  ・ビューファイルを以下のように編集しましょう。（app/views/messages/_side_bar.html.erb）
  <div class="create-room">
    <%= link_to "チャットを作成する", new_room_path %>
  </div>



























